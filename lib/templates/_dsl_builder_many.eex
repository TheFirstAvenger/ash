<% import Mix.Tasks.Ash.CompileDsl %>
defmodule <%= nested_mod_name %> do
  # _dsl_builder_many.eex: building relationship destination
  <%= build_dsl(relationship.destination, add_imports(state, [mod_name, nested_mod_name]), relationship.source) %>
end

defmodule <%= inspect mod_name %> do
  # _dsl_builder_many.eex: building relationship section
  defmacro <%= builder_name %>(<%= Enum.join(upgrade_fields, ", ") %>, opts \\ []) do
    quote location: :keep do
      Module.register_attribute(__MODULE__, :attributes, accumulate: true)

      <%= for module <- state.imports do %>
        import <%= module %>, only: []
      <% end %>
      import <%= nested_mod_name %>
      unquote(opts[:do])
      import <%= nested_mod_name %>, only: []
      <%= for module <- state.imports do %>
        import <%= module %>
      <% end %>

      attributes = Enum.into(@attributes, %{})
      <%= for upgrade_field <- upgrade_fields do %>
        attributes = Map.put(attributes, :<%= upgrade_field %>, unquote(<%= upgrade_field %>))
      <% end %>

      attributes =
        Enum.reduce(unquote(Keyword.delete(opts, :do)), attributes, fn {name, value}, attributes -> 
          Map.put(attributes, name, value)
        end)

      for {name, value} <- unquote(Keyword.delete(opts, :do)) do
        attributes = Map.put(attributes, name, value)
      end

      attributes = Map.put(attributes, :<%= relationship.destination_field %>, @resource_id)

      {:ok, _} = Elixir.Ash.Dsl.StructureApi.create(Elixir.<%= inspect relationship.destination %>, attributes: attributes)
    end
  end
end