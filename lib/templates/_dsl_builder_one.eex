<% import Mix.Tasks.Ash.CompileDsl %>
defmodule <%= inspect mod_name %> do
  # _dsl_builder_one.eex: building relationship destination
  <%= build_dsl(relationship.destination, add_imports(state, [mod_name]), relationship.source) %>
end

<%= if upgrade_fields == [] do %>
  defmacro <%= builder_name %>(opts__ \\ []) do
<% else %>
  defmacro <%= builder_name %>(<%= Enum.join(upgrade_fields, ", ") %>, opts__ \\ []) do
<% end %>
# _dsl_builder_one.eex: building relationship section
 quote location: :keep do
    Module.register_attribute(__MODULE__, :attributes, accumulate: true)

    import <%= inspect mod_name %>
    <%= for module <- state.imports do %>
      import <%= module %>, only: []
    <% end %>
    unquote(opts__[:do])
    <%= for module <- state.imports do %>
      import <%= module %>
    <% end %>
    import <%= inspect mod_name %>, only: []

    attributes = Enum.into(@attributes, %{})
    <%= for upgrade_field <- upgrade_fields do %>
      attributes = Map.put(attributes, :<%= upgrade_field %>, unquote(<%= upgrade_field %>))
    <% end %>

    attributes =
      Enum.reduce(unquote(Keyword.delete(opts__, :do)), attributes, fn {name, value}, attributes -> 
        Map.put(attributes, name, value)
      end)

    for {name, value} <- unquote(Keyword.delete(opts__, :do)) do
      attributes = Map.put(attributes, name, value)
    end

    attributes = Map.put(attributes, :<%= relationship.destination_field %>, @resource_id)

    {:ok, _} = Elixir.Ash.Dsl.StructureApi.create(Elixir.<%= inspect relationship.destination %>, attributes: attributes)
 end
end